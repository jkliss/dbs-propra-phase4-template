openapi: 3.0.2
info:
  title: DBS Programmierpraktikum - WS 2018 (Januar) - 4. Teil - API-Spezifikation
  description: >-
    In der folgenden Liste finden Sie die <b>für die Anwendergruppen
    spezifischen Grundfunktionalitäten</b>. Es müssen <b>alle folgenden
    allgemeinen Bedingungen</b> eingehalten werden:
    <ul>
      <li><b>Bei einer gültigen <code>GET</code>-Anfrage wird entweder ein JSON-Array von JSON-Objekten, falls die Ressource eine Sammlung von Entitäten darstellt, oder ein JSON-Objekt, falls die Ressource eine einzelne Entität darstellt, zurückgegeben</b> und dies mit einem Code <code>200</code> belegt. Wird die <code>GET</code>-Anfrage auf einer nicht vorhandenen Ressource ausgeführt, so wird mit Code <code>404</code> geantwortet. Eine <code>GET</code>-Anfrage auf einer Ressource, die eine Sammlung von Entitäten darstellt, kann durch Übergabe von bestimmten Parametern und dazugehörigen Werten <b>case-insensitive gefiltert</b> werden. Dabei muss jede Entität in der Sammlung allen Parametern gleichzeitig genügen. Die Sammlung wird in der Antwort in ein JSON-Array gekapselt.</li>
      <li><b>Bei <code>POST</code>-Anfragen werden alle Parameter bis auf diejenigen Parameter der entsprechenden Ressource benötigt, die Standardwerte besitzen.</b> Wird die <code>POST</code>-Anfrage auf einer nicht vorhandenen Ressource ausgeführt, so wird mit Code <code>404</code> geantwortet. Ist die Ressource vorhanden, aber die Anfragen wegen irgendeiner anderen Sache (ungültige Werte, zu wenig Parameter, ...) ungültig, so wird dies mit einem Code <code>400</code> beantwortet, anonsten mit Code <code>201</code> und dem Link zur neuen Ressource im Header belegt.</li>
      <li><b>Bei <code>PATCH</code>-Anfragen werden nur diejenigen Parameter benötigt, die geändert werden sollen, folglich mindestens einer.</b> Wird die <code>PATCH</code>-Anfrage auf einer nicht vorhandenen Ressource ausgeführt, so wird mit Code <code>404</code> geantwortet. Ist die Ressource vorhanden, aber die Anfragen wegen irgendeiner anderen Sache (ungültige Werte, ...) ungültig, so wird dies mit einem Code <code>400</code> beantwortet, anonsten mit Code <code>204</code> belegt.</li>
      <li><b>Bei einer gültigen <code>DELETE</code>-Anfrage wird der Code <code>204</code> zurückgegeben.</b> Ist die Ressource nicht vorhanden, wird dies mit Code <code>404</code> belegt.</li>
      <li><b>Bereiche mit einem Schlosssymbol werden durch eine HTTP-Basisauthentifizierung abgesichert.</b> Wird einer dieser Bereiche ohne oder mit falschen Anmeldedaten aufgerufen, so wird dies mit einem <code>401</code> und dem Header <code>WWW-Authenticate</code> belegt. Sind die Anmeldedaten richtig, aber der Anwender ist nicht authorisiert, so wird dies mit einem Code <code>403</code> belegt.</li>
      <li><b>In Antworten mit Code <code>4xx</code> wird ein JSON-Objekt, das mindestens den Schlüssel <code>"message"</code> mit dem Wert <code>&lt;Fehlermeldung&gt;</code> enthält, zurückgegeben</b>, wobei <code>&lt;Fehlermeldung&gt;</code> eine für den Umstand entsprechende Fehlermeldung ist. Bei einer auftretenden Exception reicht dafür die Nachricht dieser.</li>
      <li><b>Antworten auf gültige <code>POST</code>- und <code>PATCH</code>-Anfragen beinhalten nichts.</b></li>
      <li><b>Anfragen sind vom Typ <code>multipart/form-data</code>, Antworten sind vom Typ <code>application/json;charset=UTF-8</code>.</b></li>
      <li><b>Datums- und Zeitangaben werden im entsprechenden Standard-SQL-Format übertragen</b> (sowohl in der Anfrage, als auch in der Antwort).</li>
      <li><b>Passwörter werden der Einfachheit halber im Klartext übergeben.</b></li>
      <li><b>Die erwähnten IDs sind RowIDs!!!</b></li>
    </ul>
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /unterkuenfte:
    get:
      tags:
        - Anwender
      summary: Gibt Unterkünfte zurück.
      description: >-
        Alle Unterkünfte werden zurückgegeben. Falls Query-Parameter mit Werten
        angegeben wurden, wird die Rückgabe noch entsprechend gefiltert.
      parameters:
        - name: bezeichnung
          in: query
          description: 'Nur Unterkünfte, deren **Bezeichnung** `bezeichnung` enthalten, werden zurückgegeben.'
          schema:
            type: string
        - name: sterne
          in: query
          description: 'Nur Unterkünfte, die eine Anzahl von `sterne` Hotelsternen haben, werden zurückgegeben.'
          schema:
            type: integer
        - name: top
          in: query
          description: 'Hierbei werden die `top` am häufigsten gebuchten Unterkünfte absteigend ausgegeben.'
          schema:
            type: integer
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        unterkunftid:
                          type: integer
                          description: '**RowID der Unterkunft**.'
                      required:
                        - reisebuero
                    - $ref: '#/components/schemas/unterkunft'
  /fluege:
    get:
      tags:
        - Anwender
      summary: Gibt nicht ausgebuchte Flüge zurück.
      description: >-
        Alle Flüge, die nicht ausgebucht sind, werden zurückgegeben. Falls Query-Parameter mit Werten
        angegeben wurden, wird die Rückgabe noch entsprechend gefiltert.
      parameters:
        - name: startzeitpunkt
          in: query
          description: 'Nur Flüge, die am Tag von `startzeitpunkt` starten.'
          schema:
            type: string
        - name: startflughafen
          in: query
          description: 'Nur Flüge, die von `startflughafen` starten.'
          schema:
            type: string
        - name: zielflughafen
          in: query
          description: 'Nur Flüge, die in `zielflughafen` landen.'
          schema:
            type: string
        - name: flugzeugid
          in: query
          description: 'Nur Flüge mit dem Flugzeug `flugzeugid`.'
          schema:
            type: string
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        flugid:
                          type: integer
                          description: '**RowID des Flugs**.'
                      required:
                        - reisebuero
                    - $ref: '#/components/schemas/flug'
  /flughaefen:
    get:
      tags:
        - Anwender
      summary: Gibt Flughäfen zurück.
      description: >-
        Alle Flughäfen werden zurückgegeben. Falls Query-Parameter mit Werten
        angegeben wurden, wird die Rückgabe noch entsprechend gefiltert.
      parameters:
        - name: bezeichnung
          in: query
          description: 'Nur Flughäfen, deren Bezeichnung `bezeichnung` enthält.'
          schema:
            type: string
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        flughafenid:
                          type: integer
                          description: '**RowID des Flughafens**.'
                      required:
                        - reisebuero
                    - $ref: '#/components/schemas/flughafen'
  /flugzeuge:
    get:
      tags:
        - Anwender
      summary: Gibt Flugzeuge zurück.
      description: >-
        Alle Flugzeuge werden zurückgegeben. Falls Query-Parameter mit Werten
        angegeben wurden, wird die Rückgabe noch entsprechend gefiltert.
      parameters:
        - name: flugzeugid
          in: query
          description: 'Gibt nur das Flugzeug mit RowID `flugzeugid` zurück.'
          schema:
            type: string
        - name: modell
          in: query
          description: 'Nur Flugzeuge, deren Modellname `modell` enthält.'
          schema:
            type: string
        - name: baujahr
          in: query
          description: 'Nur Flugzeuge aus dem Baujahr `baujahr`.'
          schema:
            type: integer
        - name: passagieranzahl
          in: query
          description: 'Nur Flugzeuge mit einer Passagierkapazität von mindestens `passagieranzahl`.'
          schema:
            type: integer
        - name: crewanzahl
          in: query
          description: 'Nur Flugzeuge mit einer Crewkapazität von mindestens `crewanzahl`.'
          schema:
            type: integer
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        flugzeugid:
                          type: integer
                          description: '**RowID des Flugzeugs**.'
                      required:
                        - flugzeugid
                    - $ref: '#/components/schemas/flugzeug'
  /reisebueros:
    get:
      tags:
        - Anwender
      summary: Gibt Reisebüros zurück.
      description: >-
        Alle Reisebüros werden zurückgegeben. Falls Query-Parameter mit Werten
        angegeben wurden, werden diese Reisebüros noch entsprechend gefiltert.
      parameters:
        - name: username
          in: query
          description: 'Nur Reisebüros, deren **Username** `username` enthalten, werden zurückgegeben.'
          schema:
            type: string
        - name: email
          in: query
          description: 'Nur Reisebüros, deren **E-Mail** `email` enthalten, werden zurückgegeben.'
          schema:
            type: string
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        reisebueroid:
                          type: integer
                          description: '**RowID des Reisebüros**.'
                      required:
                        - reisebuero
                    - $ref: '#/components/schemas/reisebuero'
    post:
      security:
        - basic authentication: []
      tags:
        - Anwender
      summary: Fügt ein Reisebüro hinzu.
      description: >-
        Ein Reisebüro wird mit den entsprechenden Werten hinzugefügt.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/reisebuero'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  '/buchungen':
    get:
      security:
        - basic authentication: []
      tags:
        - Authentifizierter und als Reisebüro authorisierter Anwender
      summary: Gibt die eigenen Buchungen (des jeweiligen Reisebüros) zurück.
      description: >-
        Die eigenen Buchungen werden zurückgegeben. Hier werden nur die Buchungen von dem jeweils authentifzierten Reisebüro zurückgegeben.
      parameters:
        - name: rowid
          in: path
          description: '**RowID der Buchung**.'
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                allOf:
                  - type: object
                    properties:
                      buchungid:
                        type: integer
                        description: '**RowID der Buchung**.'
                    required:
                      - ticketid
                  - type: object
                    properties:
                      preis:
                        type: number
                        format: double
                        description: '**Preis** der Buchung.'
                      datum:
                        type: string
                        format: date-time
                        description: '**Datum** der Buchung.'
                    required:
                      - buchungid
                      - preis
                      - datum
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/flugtickets':
    get:
      security:
        - basic authentication: []
      tags:
        - Authentifizierter und als Reisebüro authorisierter Anwender
      summary: Gibt die eigenen Tickets (des jeweiligen Reisebüros) zurück.
      description: >-
        Die eigenen Tickets werden zurückgegeben. Hier werden nur die Tickets von dem jeweils authentifzierten Reisebüro zurückgegeben.
      parameters:
        - name: rowid
          in: path
          description: '**RowID des Tickets**.'
          schema:
            type: integer
          required: true
        - name: vorname
          in: path
          description: 'Nur Tickets, deren **Vorname** `vorname` enthält .'
          schema:
            type: string
          required: true
        - name: nachname
          in: path
          description: 'Nur Tickets, deren **Nachname** `nachname` enthält .'
          schema:
            type: string
          required: true
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                allOf:
                  - type: object
                    properties:
                      ticketid:
                        type: integer
                        description: '**RowID des Tickets**.'
                      vorname:
                        type: string
                        description: 'Vorname des Passagiers.'
                      nachname:
                        type: string
                        description: 'Nachname des Passagiers.'
                      geschlecht:
                        type: string
                        description: 'Geschlecht des Passagiers.'
                      gepaeck:
                        type: boolean
                        description: 'Gepäck des Passagiers.'
                      extragepaeck:
                        type: boolean
                        description: 'Extragepäck des Passagiers.'
                    required:
                      - ticketid
                      - vorname
                      - nachname
                      - geschlecht
                      - gepaeck
                      - extragepaeck
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      security:
        - basic authentication: []
      tags:
        - Authentifizierter und als Reisebüro authorisierter Anwender
      summary: Fügt ein Flugticket inkl. Buchung hinzu.
      description: >-
        Ein Flugticket wird mit den entsprechenden Werten hinzugefügt. Hierbei wird auch eine **zugeordnete Buchung** angelegt.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/ticket'
                - type: object
                  properties:
                    flugid:
                      type: integer
                      description: '**RowID** des Flugs.'
                    preis:
                      type: number
                      description: '**Preis** der Buchung.'
                  required:
                    - flugid
                    - preis
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  '/flugtickets/{flugticketid}':
    delete:
      security:
        - basic authentication: []
      tags:
        - Authentifizierter und als Reisebüro authorisierter Anwender
      summary: Löscht ein Flugticket (inkl. Buchung)
      description: >-
        Das **Flugticket mit RowID** `flugticketid` wird  gelöscht. Die zugehörige Buchung wird ebenfalls gelöscht.
      parameters:
        - name: flugticketid
          in: path
          description: '**RowID des Flugtickets**.'
          schema:
            type: integer
          required: true
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/flugtickets/{flugticketid}/fluege':
    get:
      security:
        - basic authentication: []
      tags:
        - Authentifizierter und als Reisebüro authorisierter Anwender
      summary: Gibt Flüge zu einem Flugticket zurück.
      description: >-
        Gibt **alle** vorhandenen Flüge zu einem Flugticket zurück.
      parameters:
        - name: flugticketid
          in: path
          description: '**RowID des Flugtickets**.'
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                allOf:
                  - type: object
                    properties:
                      flugticketid:
                        type: integer
                        description: '**RowID des Flugtickets**.'
                      flugid:
                        type: string
                        description: '**RowID des Flugs**.'
                    required:
                      - flugticketid
                      - flugid
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      security:
        - basic authentication: []
      tags:
        - Authentifizierter und als Reisebüro authorisierter Anwender
      summary: Fügt einen Flug zu einem Flugticket hinzu.
      description: >-
        Ein Flug wird zum **Flugticket** `flugticketid` hinzugefügt.
      parameters:
        - name: flugticketid
          in: path
          description: '**RowID des Flugtickets**.'
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                flugid:
                  type: integer
                  description: '**RowID des Flugs**.'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/reisen/{reiseid}':
    delete:
      security:
        - basic authentication: []
      tags:
        - Authentifizierter und als Reisebüro authorisierter Anwender
      summary: Löscht eine Reise (inkl. Buchung)
      description: >-
        Die (eigene) **Reise mit RowID** `reiseid` wird inkl. der übergeordneten Buchung gelöscht.
      parameters:
        - name: reiseid
          in: path
          description: '**RowID der Reise**.'
          schema:
            type: integer
          required: true
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/reisen':
    get:
      security:
        - basic authentication: []
      tags:
        - Authentifizierter und als Reisebüro authorisierter Anwender
      summary: Gibt die eigenen Reisen (des jeweiligen Reisebüros) zurück.
      description: >-
        Die eigenen Reisen werden zurückgegeben. Hier werden nur die Reisen von dem jeweils authentifzierten Reisebüro zurückgegeben.
      parameters:
        - name: rowid
          in: path
          description: '**RowID der Reise**.'
          schema:
            type: integer
          required: true
        - name: titel
          in: path
          description: 'Nur Reisen, die im **Titel** `titel` enthalten.'
          schema:
            type: string
          required: true
        - name: startdatum
          in: path
          description: 'Nur Reisen, die am **Datum** `startdatum` beginnen.'
          schema:
            type: string
            format: date-time
          required: true
        - name: tags
          in: path
          description: 'Nur Reisen, die als **Tags** `tags` besitzen (mehrere werden mit AND verknüpft)'
          schema:
            type: string
          required: true
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                allOf:
                  - type: object
                    properties:
                      reiseid:
                        type: integer
                        description: '**RowID der Reise**.'
                      titel:
                        type: string
                        description: 'Titel der Reise.'
                      startdatum:
                        type: string
                        format: date-time
                        description: 'Startdatum der Reise.'
                      rueckkehrdatum:
                        type: string
                        format: date-time
                        description: 'Enddatum der Reise.'
                    required:
                      - reiseid
                      - titel
                      - startdatum
                      - rueckkehrdatum
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      security:
        - basic authentication: []
      tags:
        - Authentifizierter und als Reisebüro authorisierter Anwender
      summary: Fügt eine Reise hinzu (inkl. Buchung).
      description: >-
        Eine Reise inkl. Buchung wird angelegt.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/reise'
                - type: object
                  properties:
                    unterkunftid:
                      type: integer
                      description: '**RowID** der Unterkunft.'
                    preis:
                      type: number
                      description: '**Preis** der Buchung.'
                  required:
                    - unterkunftid
                    - preis
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/reisen/{reiseid}/unterkuenfte':
    get:
      security:
        - basic authentication: []
      tags:
        - Authentifizierter und als Reisebüro authorisierter Anwender
      summary: Gibt Unterkünfte zu (eigenen) Reisen zurück.
      description: >-
        Alle Unterkünfte zur Reise mit **ReiseID** `reiseid` anzeigen. **Unterkünfte werden nur zurückgegeben, wenn das abfragende Reisebüro auch der Ersteller der Reise ist.**
      parameters:
        - name: reiseid
          in: path
          description: '**RowID der Reise**.'
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                allOf:
                  - type: object
                    properties:
                      reiseid:
                        type: integer
                        description: '**RowID der Reise**.'
                      titel:
                        type: string
                        description: 'Titel der Reise.'
                      unterkunftid:
                        type: string
                        description: '**RowID der Unterkunft**.'
                      unterkunft_bez:
                        type: string
                        description: 'Bezeichnung der Unterkunft..'
                    required:
                      - reiseid
                      - titel
                      - unterkunftid
                      - unterkunft_bez
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/reisen/{reiseid}/tags':
    post:
      security:
        - basic authentication: []
      tags:
        - Authentifizierter und als Reisebüro authorisierter Anwender
      summary: Fügt einer (eigenen) Reise Tags hinzu.
      description: >-
        Fügt der (eigenen) **Reise** mit `reiseid` Tags hinzu.
      parameters:
        - name: reiseid
          in: path
          description: '**RowID der Reise**.'
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - type: object
                  properties:
                    tag:
                      type: string
                      description: 'Bezeichnung des Tags oder mehrere mit AND verknüpft.'
                  required:
                    - tag
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    get:
      security:
        - basic authentication: []
      tags:
        - Authentifizierter und als Reisebüro authorisierter Anwender
      summary: Gibt die Tags einer Reise zurück.
      description: >-
        Alle Tags zur Reise mit **ReiseID** `reiseid` anzeigen.
      parameters:
        - name: reiseid
          in: path
          description: '**RowID der Reise**.'
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                    - $ref: '#/components/schemas/tag'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
components:
  securitySchemes:
    basic authentication:
      type: http
      scheme: basic
  responses:
    '201':
      description: '**Created**.'
      headers:
        Location:
          description: Die URL der neuen Ressource.
          schema:
            type: string
    '204':
      description: '**No Content**.'
    '400':
      description: '**Bad Request**.'
    '401':
      description: '**Unauthorized**.'
      headers:
        WWW-Authenticate:
          schema:
            type: string
    '403':
      description: '**Forbidden**.'
    '404':
      description: '**Not Found**.'
  schemas:
    adresse:
      type: object
      properties:
        strasse:
          type: string
          description: '**Straße** der Adresse.'
        hausnummer:
          type: string
          description: '**Hausnummer** der Adresse.'
        plz:
          type: string
          description: '**PLZ** der Adresse.'
        ort:
          type: string
          description: '**Ort** der Adresse.'
        land:
          type: string
          description: '**Land** der Adresse.'
      required:
        - strasse
        - hausnummer
        - ort
        - plz
        - land
    reisebuero:
      type: object
      properties:
        username:
          type: string
          description: '**Username** des Reisebüros.'
        email:
          type: string
          description: '**Email** des Reisebüros.'
        passwort:
          type: string
          description: '**Passwort** des Reisebüros.'
        adresseid:
          type: string
          description: '**AdresseID** des Reisebüros.'
      required:
        - username
        - email
        - passwort
        - adresseid
    buchung:
      type: object
      properties:
        preis:
          type: number
          description: '**Preis** der Buchung.'
        datum:
          type: string
          format: date-time
          description: '**Datum** der Buchung.'
        username:
          type: string
          description: '**Username** des Reisebüros.'
      required:
        - preis
        - datum
        - username
    reise:
      type: object
      properties:
        startzeitpunkt:
          type: string
          format: date-time
          description: '**Startzeitpunkt** der Reise.'
        dauer:
          type: integer
          description: '**Dauer** der Reise in Tagen.'
        titel:
          type: string
          description: '**Titel** der Reise.'
      required:
        - startzeitpunkt
        - dauer
        - titel
    ticket:
      type: object
      properties:
        vorname:
          type: string
          description: '**Vorname** des Reisegasts.'
        nachname:
          type: string
          description: '**Nachname** des Reisegasts.'
        geschlecht:
          type: string
          description: '**Geschlecht** des Reisegasts.'
        gepaeck:
          type: boolean
          description: '**Gepäck** des Reisegasts.'
        extragepaeck:
          type: boolean
          description: '**Extragepäck** des Reisegasts.'
      required:
        - vorname
        - nachname
        - gepaeck
        - extragepaeck
        - geschlecht
    unterkunft:
      type: object
      properties:
        bezeichnung:
          type: string
          description: '**Bezeichnung** der Unterkunft.'
        sterne:
          type: integer
          description: '**Hotelsterne** der Unterkunft.'
        adresseid:
          type: integer
          description: '**AdresseID** der Unterkunft.'
      required:
        - bezeichnung
        - sterne
        - adresseid
    flug:
      type: object
      properties:
        startzeitpunkt:
          type: string
          format: date-time
          description: '**Startzeitpunkt** des Flugs.'
        dauer:
          type: integer
          description: '**Flugdauer** in Minuten.'
        flugzeug:
          type: integer
          description: '**Flugzeug** des Flugs.'
        startflughafen:
          type: string
          description: '**Startflughafen** des Flugs.'
        zielflughafen:
          type: string
          description: '**Zielflughafen** des Flugs.'
        fluggesellschaft:
          type: string
          description: '**Fluggesellschaft** des Flugs.'
      required:
        - startzeitpunkt
        - dauer
        - flugzeug
        - startflughafen
        - zielflughafen
        - fluggesellschaft
    flughafen:
      type: object
      properties:
        bezeichnung:
          type: string
          description: '**Bezeichnung** des Flughafens.'
      required:
        - bezeichnung
    fluggesellschaft:
      type: object
      properties:
        bezeichnung:
          type: string
          description: '**Bezeichnung** der Fluggesellschaft.'
      required:
        - bezeichnung
    bild:
      type: object
      properties:
        daten:
          type: string
          format: binary
          description: '**Bilddaten**.'
        unterkunftid:
          type: integer
          description: 'Die auf dem Bild gezeigte **Unterkunft**.'
      required:
        - daten
        - unterkunftid
    flugzeug:
      type: object
      properties:
        baujahr:
          type: integer
          description: '**Baujahr** des Flugzeugs.'
        crewanzahl:
          type: integer
          description: '**Crewanzahl** des Flugzeugs.'
        passagieranzahl:
          type: integer
          description: '**Passagieranzahl** des Flugzeugs.'
        modellbezeichnung:
          type: string
          description: '**Modellbezeichnung** des Flugzeugs.'
      required:
        - baujahr
        - crewanzahl
        - passagieranzahl
        - modellbezeichnung
    tag:
      type: object
      properties:
        bezeichnung:
          type: string
          description: '**Name** des Tags.'
      required:
        - bezeichnung